#!/usr/bin/env python

import pipes
import subprocess
import sys
from configparser import SafeConfigParser
import requests
from git import Repo

BOTNAME = 'hcc-git'
PUPPETFILE = 'Puppetfile'
CONFIGFILE = '/var/lib/gitolite/.gitolite-postrecv-slack'
MASTER = 'production'

# Debug output for GitPython
#import logging
#logging.basicConfig(level=logging.DEBUG)

class GitInfo(object):
    def __init__(self, config, oldrev, newrev, refname):
        self.config = config
        self.branch = refname.replace('refs/heads/', '')
        self.puppetfile = False
        self.text = ''

        repo = Repo(self.config['git_dir'])

        commit_tpl = ('*commit* : <{url}|{rev}> `{branch}`\n'
                      '*author* : {name} <{email}>\n'
                      '```{message}```'
                     )

        if oldrev == '0' * 40:
            # Create. Just look at newrev
            self.type = 'create'
            commits = [repo.commit(newrev)]
        elif newrev == '0' * 40:
            # Delete. No commits to process
            self.type = 'delete'
            self.text += "Deleted `%s`\n" % (self.branch)
            commits = []
        else:
            # Commit. Get commits in the range
            commits = repo.iter_commits('%s..%s' % (oldrev, newrev))

            # Determine if commit is a merge
            name_rev = repo.commit(newrev).name_rev.split()[1]
            if self.branch != name_rev:
                self.type = 'merge'
                self.text += "Merged `%s` into `%s`\n" % (name_rev, self.branch)
            else:
                self.type = 'commit'

        commit_texts = list()

        # Loop over commits
        for commit in commits:
            # Was Puppetfile modified?
            if PUPPETFILE in commit.stats.files:
                self.puppetfile = True

            # Generate a message for this commit
            commit_text = commit_tpl.format(
                url=self.config['commit_url'] + commit.hexsha,
                rev=commit.hexsha[:7],
                branch=self.branch,
                name=commit.author.name,
                email=commit.author.email,
                message=commit.message)
            commit_texts.append(commit_text)

        if commit_texts:
            self.text += '>>>' + "\n".join(commit_texts)

    def run_r10k(self):
        print("-- running r10k")
        cmd = ['ssh', self.config['puppet_sync'], pipes.quote(self.branch)]
        if self.puppetfile:
            print("-- Puppetfile in commit, r10k with puppetfile")
            cmd.append('-p')
        subprocess.call(cmd)

    def send_slack(self):
        message = {'text': self.text,
                   'username': '%s | %s' % (BOTNAME, self.type)
                  }

        # Look for slack_hook.BRANCH first
        # Then fall back to slack_hook
        slack_hook = self.config.get(
            'slack_hook.%s' % (self.branch),
            self.config['slack_hook'])

        response = requests.post(slack_hook, json=message)
        if response.status_code != 200:
            raise ValueError(
                'Request to slack returned an error %s, the response is:\n%s'
                % (response.status_code, response.text)
            )
def main():
    # gitolite wrapper calls with (hookname oldrev newrev refname)
    if len(sys.argv) != 5:
        print("Error: expected <hookname> <oldrev> <newrev> <refname> as arguments")
        print("Got: %s" % sys.argv)
        sys.exit(1)

    hookname = sys.argv[1].replace('post-receive.h00-', '')

    # read config section for hookname
    parser = SafeConfigParser()
    parser.read(CONFIGFILE)
    if parser.has_section(hookname):
        config = dict(parser.items(hookname))
    else:
        print("Error: no config section for %s found" % hookname)
        sys.exit(1)

    git_info = GitInfo(config=config,
                       oldrev=sys.argv[2],
                       newrev=sys.argv[3],
                       refname=sys.argv[4])

    git_info.send_slack()

    if config['enable_r10k']:
        git_info.run_r10k()


if __name__ == "__main__":
    main()
